{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,IAAA,EAAA,WAKE,SAAA,EAAY,EAAO,QAAA,IAAA,IAAA,EAAA,GAJX,KAAA,QAAU,IAAI,IACd,KAAA,WAAa,EAId,KAAA,YAAc,GAAgB,OAAO,MACrC,KAAA,WAAa,EAyDtB,OAtDU,EAAA,UAAA,SAAR,SAAiB,GACR,OAAA,MAAM,KAAK,GACf,OAAO,SAAC,EAAG,GAAO,OAAA,KAAK,KAAK,GAAI,GAAK,EAAE,WAAW,GAAM,GAAG,GAC3D,YAGG,EAAA,UAAA,UAAR,SAAkB,EAAa,EAAsB,GAC5C,OAAA,KAAK,SACV,GACG,EAAQ,QAAU,OACnB,KAAK,UAAU,IACd,EAAS,KAAK,SAAW,MAIxB,EAAA,UAAA,UAAR,SAAkB,EAAa,EAAK,EAAS,EAAS,GAAtD,IAAA,EAAA,KACO,KAAA,QAAQ,IAAI,EAAK,CACpB,QAAS,KAAK,YAAY,EAAG,EAAA,GAAO,IACjC,KAAK,SAAA,GAAQ,OAAA,EAAK,QAAQ,EAAK,UAAW,KAC1C,MAAM,SAAA,GAAO,OAAA,EAAK,QAAQ,EAAK,SAAU,KACzC,KAAK,SAAA,GAAK,OAAA,EAAK,QAAQ,KAC1B,UAAW,CAAC,CAAE,QAAO,EAAE,OAAM,IAC7B,MAAO,QAIH,EAAA,UAAA,SAAR,SAAiB,EAAK,EAAU,GACE,OAA3B,KAAA,QAAQ,IAAI,GAAK,MAClB,EAAS,KAAK,QAAQ,IAAI,GAAK,MAAM,SACrC,KAAK,QAAQ,IAAI,GAAK,UAAU,KAAK,CAAE,SAAQ,EAAE,SAAQ,KAGvD,EAAA,UAAA,QAAR,SAAgB,EAAK,EAAM,GACpB,KAAA,QACF,IAAI,GACJ,UAAU,QAAQ,SAAA,GAAY,OAAA,EAAS,GAAM,EAAS,WAC5C,YAAT,IAAoB,KAAK,QAAQ,IAAI,GAAK,MAAQ,IAGhD,EAAA,UAAA,QAAR,SAAgB,GAAhB,IAAA,EAAA,KACE,WACE,WAAM,OAAA,EAAK,QAAQ,OAAO,IACM,OAAhC,KAAK,QAAQ,IAAI,GAAK,MAAiB,KAAK,WAAa,IAItD,EAAA,UAAA,MAAP,SAAa,EAAa,EAA2B,GAArD,IAAA,EAAA,UAA0B,IAAA,IAAA,EAAA,SAA2B,IAAA,IAAA,GAAA,GAC7C,IAAA,EAAM,KAAK,UAAU,EAAK,EAAS,GAClC,OAAA,IAAI,QAAQ,SAAC,EAAS,GAC3B,EAAK,QAAQ,IAAI,GACb,EAAK,SAAS,EAAK,EAAS,GAC5B,EAAK,UAAU,EAAK,EAAK,EAAS,EAAS,MAGrD,EAhEA,GAAA,QAAA,QAAA","file":"fetch-in-flight.umd.js","sourceRoot":"..\\src","sourcesContent":["export default class FIF {\r\n  private flights = new Map();\r\n  private CACHE_TIME = 0;\r\n  private CACHE_FETCH;\r\n\r\n  constructor(fetch, cacheTime = 0) {\r\n    this.CACHE_FETCH = fetch ? fetch : window.fetch;\r\n    this.CACHE_TIME = cacheTime;\r\n  }\r\n\r\n  private hashCode(code: string): string {\r\n    return Array.from(code)\r\n      .reduce((s, c) => (Math.imul(31, s) + c.charCodeAt(0)) | 0, 0)\r\n      .toString();\r\n  }\r\n\r\n  private uniqueKey(url: string, options: RequestInit, unique: boolean) {\r\n    return this.hashCode(\r\n      url +\r\n        (options.method || \"GET\") +\r\n        JSON.stringify(options) +\r\n        (unique ? Math.random() : \"\")\r\n    );\r\n  }\r\n\r\n  private newFlight(key: string, url, options, resolve, reject) {\r\n    this.flights.set(key, {\r\n      promise: this.CACHE_FETCH(url, { ...options })\r\n        .then(data => this.landing(key, \"resolve\", data))\r\n        .catch(err => this.landing(key, \"reject\", err))\r\n        .then(_ => this.cleanUp(key)),\r\n      listeners: [{ resolve, reject }],\r\n      cache: null\r\n    });\r\n  }\r\n\r\n  private inFlight(key, resolver, rejecter) {\r\n    this.flights.get(key).cache !== null\r\n      ? resolver(this.flights.get(key).cache.clone())\r\n      : this.flights.get(key).listeners.push({ resolver, rejecter });\r\n  }\r\n\r\n  private landing(key, type, response: Response) {\r\n    this.flights\r\n      .get(key)\r\n      .listeners.forEach(listener => listener[type](response.clone()));\r\n    if (type === \"resolve\") this.flights.get(key).cache = response;\r\n  }\r\n\r\n  private cleanUp(key) {\r\n    setTimeout(\r\n      () => this.flights.delete(key),\r\n      this.flights.get(key).cache !== null ? this.CACHE_TIME : 0\r\n    );\r\n  }\r\n\r\n  public fetch(url: string, options: RequestInit = {}, unique = false) {\r\n    const key = this.uniqueKey(url, options, unique);\r\n    return new Promise((resolve, reject) => {\r\n      this.flights.get(key)\r\n        ? this.inFlight(key, resolve, reject)\r\n        : this.newFlight(key, url, options, resolve, reject);\r\n    });\r\n  }\r\n}\r\n"]}